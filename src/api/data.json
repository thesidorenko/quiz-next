{
  "html": [
    {
      "id": 1,
      "question": "Choose the correct HTML element for the largest heading:",
      "answers": [
        { "text": "<heading>", "isCorrect": false },
        { "text": "<h6>", "isCorrect": false },
        { "text": "<h1>", "isCorrect": true },
        { "text": "<h2>", "isCorrect": false }
      ]
    },
    {
      "id": 2,
      "question": "What is the correct HTML element for inserting a line break?",
      "answers": [
        { "text": "<br>", "isCorrect": true },
        { "text": "<lb>", "isCorrect": false },
        { "text": "<break>", "isCorrect": false },
        { "text": "<newline>", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "question": "What is the correct HTML for creating a hyperlink?",
      "answers": [
        {
          "text": "<a url='http://www.example.com'>Example</a>",
          "isCorrect": false
        },
        {
          "text": "<a href='http://www.example.com'>Example</a>",
          "isCorrect": true
        },
        {
          "text": "<a link='http://www.example.com'>Example</a>",
          "isCorrect": false
        },
        {
          "text": "<link href='http://www.example.com'>Example</link>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 4,
      "question": "How can you open a link in a new tab/browser window?",
      "answers": [
        { "text": "<a href='url' new>", "isCorrect": false },
        { "text": "<a href='url' target='new'>", "isCorrect": false },
        { "text": "<a href='url' target='new_tab'>", "isCorrect": false },
        { "text": "<a href='url' target='_blank'>", "isCorrect": true }
      ]
    },
    {
      "id": 5,
      "question": "How can you make a numbered list?",
      "answers": [
        { "text": "<ul>", "isCorrect": false },
        { "text": "<ol>", "isCorrect": true },
        { "text": "<list>", "isCorrect": false },
        { "text": "<dl>", "isCorrect": false }
      ]
    },
    {
      "id": 6,
      "question": "How can you make a bulleted list?",
      "answers": [
        { "text": "<ul>", "isCorrect": true },
        { "text": "<ol>", "isCorrect": false },
        { "text": "<list>", "isCorrect": false },
        { "text": "<dl>", "isCorrect": false }
      ]
    },
    {
      "id": 7,
      "question": "What is the correct HTML for inserting an image?",
      "answers": [
        { "text": "<image src='image.gif' alt='MyImage'>", "isCorrect": false },
        { "text": "<img src='image.gif' alt='MyImage'>", "isCorrect": true },
        { "text": "<img href='image.gif' alt='MyImage'>", "isCorrect": false },
        { "text": "<img alt='image.gif' src='MyImage'>", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "question": "What is the purpose of the <head> element in HTML?",
      "answers": [
        {
          "text": "To define the main content of the document",
          "isCorrect": false
        },
        {
          "text": "To define the title, styles, scripts, and meta information",
          "isCorrect": true
        },
        { "text": "To define the header of the document", "isCorrect": false },
        { "text": "To define the sidebar content", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "question": "What does the <aside> element represent?",
      "answers": [
        {
          "text": "Content that is tangentially related to the main content",
          "isCorrect": true
        },
        { "text": "Main content of the document", "isCorrect": false },
        { "text": "Footer content", "isCorrect": false },
        { "text": "Header content", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "question": "Which HTML attribute is used to specify that an input field must be filled out?",
      "answers": [
        { "text": "placeholder", "isCorrect": false },
        { "text": "validate", "isCorrect": false },
        { "text": "mandatory", "isCorrect": false },
        { "text": "required", "isCorrect": true }
      ]
    }
  ],
  "css": [
    {
      "id": 1,
      "question": "Which CSS property controls the text size?",
      "answers": [
        { "text": "font-size", "isCorrect": true },
        { "text": "text-size", "isCorrect": false },
        { "text": "font-style", "isCorrect": false },
        { "text": "text-style", "isCorrect": false }
      ]
    },
    {
      "id": 2,
      "question": "How do you select an element with id 'header' in CSS?",
      "answers": [
        { "text": ".header", "isCorrect": false },
        { "text": "header", "isCorrect": false },
        { "text": "#header", "isCorrect": true },
        { "text": "*header", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "question": "Which CSS property is used to change the space inside the border of an element?",
      "answers": [
        { "text": "margin", "isCorrect": false },
        { "text": "border-spacing", "isCorrect": false },
        { "text": "padding", "isCorrect": true },
        { "text": "spacing", "isCorrect": false }
      ]
    },
    {
      "id": 4,
      "question": "How do you select all elements with class 'intro' in CSS?",
      "answers": [
        { "text": "#intro", "isCorrect": false },
        { "text": "*intro", "isCorrect": false },
        { "text": "intro", "isCorrect": false },
        { "text": ".intro", "isCorrect": true }
      ]
    },
    {
      "id": 5,
      "question": "How do you create a CSS custom property (variable)?",
      "answers": [
        { "text": "var-main-color: #333;", "isCorrect": false },
        { "text": "--main-color: #333;", "isCorrect": true },
        { "text": "$main-color: #333;", "isCorrect": false },
        { "text": "@main-color: #333;", "isCorrect": false }
      ]
    },
    {
      "id": 6,
      "question": "What is the default value of the 'position' property in CSS?",
      "answers": [
        { "text": "static", "isCorrect": true },
        { "text": "relative", "isCorrect": false },
        { "text": "absolute", "isCorrect": false },
        { "text": "fixed", "isCorrect": false }
      ]
    },
    {
      "id": 7,
      "question": "What does the 'position: sticky;' CSS property do?",
      "answers": [
        {
          "text": "It makes an element scroll with the content until a specified point, where it then becomes fixed",
          "isCorrect": true
        },
        {
          "text": "It makes an element fixed at a specific position",
          "isCorrect": false
        },
        {
          "text": "It makes an element float above the content",
          "isCorrect": false
        },
        {
          "text": "It hides an element and reveals it on scroll",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 8,
      "question": "What does 'flex-wrap: wrap;' do?",
      "answers": [
        {
          "text": "Makes flex items overlap each other",
          "isCorrect": false
        },
        {
          "text": "Centers flex items horizontally within their container",
          "isCorrect": false
        },
        {
          "text": "Forces flex items to wrap onto multiple lines if necessary",
          "isCorrect": true
        },
        {
          "text": "Shrinks flex items to fit their container",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 9,
      "question": "How do you create three equal-width columns in a grid container?",
      "answers": [
        {
          "text": "grid-columns: repeat(3, auto);",
          "isCorrect": false
        },
        {
          "text": "grid-columns: 1fr 1fr 1fr;",
          "isCorrect": false
        },
        {
          "text": "grid-template-columns: repeat(auto, 1fr);",
          "isCorrect": false
        },
        {
          "text": "grid-template-columns: 1fr 1fr 1fr;",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 10,
      "question": "What are CSS media queries?",
      "answers": [
        {
          "text": "CSS media queries create animations and transitions between states.",
          "isCorrect": false
        },
        {
          "text": "CSS media queries add shadows and glows to elements.",
          "isCorrect": false
        },
        {
          "text": "CSS media queries apply different styles based on device or viewport characteristics like width, height, and orientation.",
          "isCorrect": true
        },
        {
          "text": "CSS media queries align elements in a table-like structure.",
          "isCorrect": false
        }
      ]
    }
  ],
  "javascript": [
    {
      "id": 1,
      "question": "Which of the following is NOT a valid JavaScript data type?",
      "answers": [
        {
          "text": "Boolean",
          "isCorrect": false
        },
        {
          "text": "Number",
          "isCorrect": false
        },
        {
          "text": "Undefined",
          "isCorrect": false
        },
        {
          "text": "Float",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 2,
      "question": "How do you create a function in JavaScript?",
      "answers": [
        {
          "text": "function myFunction()",
          "isCorrect": true
        },
        {
          "text": "def myFunction()",
          "isCorrect": false
        },
        {
          "text": "create myFunction()",
          "isCorrect": false
        },
        {
          "text": "function:myFunction()",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 3,
      "question": "What is the correct syntax for referring to an external script called 'script.js'?",
      "answers": [
        {
          "text": "<script href='script.js'>",
          "isCorrect": false
        },
        {
          "text": "<script src='script.js'>",
          "isCorrect": true
        },
        {
          "text": "<script ref='script.js'>",
          "isCorrect": false
        },
        {
          "text": "<script name='script.js'>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 4,
      "question": "Which method can be used to create a new array by transforming each element in an array?",
      "answers": [
        {
          "text": "map()",
          "isCorrect": true
        },
        {
          "text": "reduce()",
          "isCorrect": false
        },
        {
          "text": "filter()",
          "isCorrect": false
        },
        {
          "text": "forEach()",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 5,
      "question": "Which of the following array methods removes the last element from an array and returns that element?",
      "answers": [
        {
          "text": "push()",
          "isCorrect": false
        },
        {
          "text": "pop()",
          "isCorrect": true
        },
        {
          "text": "shift()",
          "isCorrect": false
        },
        {
          "text": "unshift()",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 6,
      "question": "Which method is used to create a new array with all elements that pass the test implemented by the provided function?",
      "answers": [
        {
          "text": "forEach()",
          "isCorrect": false
        },
        {
          "text": "filter()",
          "isCorrect": true
        },
        {
          "text": "map()",
          "isCorrect": false
        },
        {
          "text": "reduce()",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 7,
      "question": "Which method is used to convert a JSON string into a JavaScript object?",
      "answers": [
        {
          "text": "JSON.parse()",
          "isCorrect": true
        },
        {
          "text": "JSON.stringify()",
          "isCorrect": false
        },
        {
          "text": "JSON.convert()",
          "isCorrect": false
        },
        {
          "text": "JSON.toObject()",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 8,
      "question": "Which keyword is used to declare a variable in JavaScript?",
      "answers": [
        {
          "text": "var",
          "isCorrect": false
        },
        {
          "text": "let",
          "isCorrect": false
        },
        {
          "text": "const",
          "isCorrect": false
        },
        {
          "text": "All of the above",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 9,
      "question": "Which method is used to join two or more arrays in JavaScript?",
      "answers": [
        {
          "text": "merge()",
          "isCorrect": false
        },
        {
          "text": "combine()",
          "isCorrect": false
        },
        {
          "text": "concat()",
          "isCorrect": true
        },
        {
          "text": "join()",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 10,
      "question": "What will '2' + 3 return in JavaScript?",
      "answers": [
        {
          "text": "23",
          "isCorrect": true
        },
        {
          "text": "5",
          "isCorrect": false
        },
        {
          "text": "NaN",
          "isCorrect": false
        },
        {
          "text": "undefined",
          "isCorrect": false
        }
      ]
    }
  ],
  "typescript": [
    {
      "id": 1,
      "question": "Which of the following is NOT a type in TypeScript?",
      "answers": [
        {
          "text": "number",
          "isCorrect": false
        },
        {
          "text": "string",
          "isCorrect": false
        },
        {
          "text": "decimal",
          "isCorrect": true
        },
        {
          "text": "boolean",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 2,
      "question": "How do you define an array of strings in TypeScript?",
      "answers": [
        {
          "text": "let names: string[];",
          "isCorrect": true
        },
        {
          "text": "let names: [string];",
          "isCorrect": false
        },
        {
          "text": "let names: array<string>;",
          "isCorrect": false
        },
        {
          "text": "let names: string[array];",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 3,
      "question": "How do you specify a function parameter with an optional value in TypeScript?",
      "answers": [
        {
          "text": "parameter!",
          "isCorrect": false
        },
        {
          "text": "parameter?",
          "isCorrect": true
        },
        {
          "text": "optional parameter",
          "isCorrect": false
        },
        {
          "text": "parameter.opt",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 4,
      "question": "How do you specify a type for a function that returns a string?",
      "answers": [
        {
          "text": "function getString() -> string",
          "isCorrect": false
        },
        {
          "text": "function getString(): String",
          "isCorrect": false
        },
        {
          "text": "function getString() -> String",
          "isCorrect": false
        },
        {
          "text": "function getString(): string",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 5,
      "question": "What is the correct way to define an interface in TypeScript?",
      "answers": [
        {
          "text": "interface Person = { name: string; age: number; }",
          "isCorrect": false
        },
        {
          "text": "interface Person: { name: string; age: number; }",
          "isCorrect": false
        },
        {
          "text": "interface Person { name: string; age: number; }",
          "isCorrect": true
        },
        {
          "text": "interface Person [ name: string; age: number; ]",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 6,
      "question": "Which TypeScript feature provides a way to group related values?",
      "answers": [
        {
          "text": "Generics",
          "isCorrect": false
        },
        {
          "text": "Enums",
          "isCorrect": true
        },
        {
          "text": "Interfaces",
          "isCorrect": false
        },
        {
          "text": "Modules",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 7,
      "question": "How do you define a union type in TypeScript?",
      "answers": [
        {
          "text": "let value: type1 | type2;",
          "isCorrect": true
        },
        {
          "text": "let value: type1 || type2;",
          "isCorrect": false
        },
        {
          "text": "let value: type1 or type2;",
          "isCorrect": false
        },
        {
          "text": "let value: type1/type2;",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 8,
      "question": "What does the 'abstract' keyword do in TypeScript?",
      "answers": [
        {
          "text": "Defines a private property",
          "isCorrect": false
        },
        {
          "text": "Defines a read-only property",
          "isCorrect": false
        },
        {
          "text": "Defines a static method",
          "isCorrect": false
        },
        {
          "text": "Defines a method that must be implemented by subclasses",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 9,
      "question": "What is the default access modifier for properties and methods in a TypeScript class?",
      "answers": [
        {
          "text": "private",
          "isCorrect": false
        },
        {
          "text": "public",
          "isCorrect": true
        },
        {
          "text": "protected",
          "isCorrect": false
        },
        {
          "text": "readonly",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 10,
      "question": "What does the '!' symbol mean in TypeScript when placed after a variable?",
      "answers": [
        {
          "text": "Indicates the variable is optional",
          "isCorrect": false
        },
        {
          "text": "Indicates the variable is read-only",
          "isCorrect": false
        },
        {
          "text": "Indicates the variable is never null or undefined",
          "isCorrect": true
        },
        {
          "text": "Indicates the variable is protected",
          "isCorrect": false
        }
      ]
    }
  ],
  "react": [
    {
      "id": 1,
      "question": "Which method in React is used to change the state of a component?",
      "answers": [
        {
          "text": "setState",
          "isCorrect": true
        },
        {
          "text": "updateState",
          "isCorrect": false
        },
        {
          "text": "changeState",
          "isCorrect": false
        },
        {
          "text": "modifyState",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 2,
      "question": "What is React's virtual DOM?",
      "answers": [
        {
          "text": "A direct copy of the real DOM",
          "isCorrect": false
        },
        {
          "text": "A function to update the real DOM",
          "isCorrect": false
        },
        {
          "text": "A special type of component",
          "isCorrect": false
        },
        {
          "text": "A lightweight representation of the real DOM",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 3,
      "question": "Which lifecycle method is called after a component is rendered for the first time?",
      "answers": [
        {
          "text": "componentWillMount",
          "isCorrect": false
        },
        {
          "text": "componentDidMount",
          "isCorrect": true
        },
        {
          "text": "componentDidUpdate",
          "isCorrect": false
        },
        {
          "text": "componentWillUpdate",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 4,
      "question": "Which hook is used to handle side effects in functional components?",
      "answers": [
        {
          "text": "useState",
          "isCorrect": false
        },
        {
          "text": "useContext",
          "isCorrect": false
        },
        {
          "text": "useEffect",
          "isCorrect": true
        },
        {
          "text": "useReducer",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 5,
      "question": "What is the purpose of `React.Fragment`?",
      "answers": [
        {
          "text": "To create stateful components",
          "isCorrect": false
        },
        {
          "text": "To memoize expensive calculations",
          "isCorrect": false
        },
        {
          "text": "To manage side effects in components",
          "isCorrect": false
        },
        {
          "text": "To return multiple elements without adding extra nodes to the DOM",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 6,
      "question": "What does 'React.memo' do?",
      "answers": [
        {
          "text": "Prevents unnecessary re-renders of a component",
          "isCorrect": true
        },
        {
          "text": "Handles state management in a component",
          "isCorrect": false
        },
        {
          "text": "Allows you to create context in a component",
          "isCorrect": false
        },
        {
          "text": "Runs side effects in a component",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 7,
      "question": "Which hook would you use to memoize a value in React?",
      "answers": [
        {
          "text": "useState",
          "isCorrect": false
        },
        {
          "text": "useEffect",
          "isCorrect": false
        },
        {
          "text": "useCallback",
          "isCorrect": false
        },
        {
          "text": "useMemo",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 8,
      "question": "How do you handle forms in React?",
      "answers": [
        {
          "text": "Using controlled components",
          "isCorrect": true
        },
        {
          "text": "Using uncontrolled components",
          "isCorrect": false
        },
        {
          "text": "Using context API",
          "isCorrect": false
        },
        {
          "text": "Using Redux",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 9,
      "question": "What does the 'useReducer' hook do in React?",
      "answers": [
        {
          "text": "Handles side effects in functional components",
          "isCorrect": false
        },
        {
          "text": "Manages more complex state logic compared to 'useState'",
          "isCorrect": true
        },
        {
          "text": "Provides context to child components",
          "isCorrect": false
        },
        {
          "text": "Runs code after the component renders",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 10,
      "question": "What is a common use case for using React Portals?",
      "answers": [
        {
          "text": "To manage component state",
          "isCorrect": false
        },
        {
          "text": "To render children into a DOM node outside of the parent component’s hierarchy",
          "isCorrect": true
        },
        {
          "text": "To handle form submissions",
          "isCorrect": false
        },
        {
          "text": "To fetch data from an API",
          "isCorrect": false
        }
      ]
    }
  ]
}
